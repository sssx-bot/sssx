import fs from "fs";
import path from "path";
import { uniqueFilter } from "./uniqueFilter";
import { SSSX_URLS_INDEX } from "./constants";

const getFullPath = (cwd: string) =>
  path.normalize(`${cwd}/${SSSX_URLS_INDEX}`);

export const loadExistingURLs = async (cwd: string) => {
  let array: string[] = [];
  const fullpath = getFullPath(cwd);
  if (fs.existsSync(fullpath)) {
    const module = await import(fullpath);
    array = [...module.all].filter(uniqueFilter);
  }

  return array;
};

const arrayToFile = <T>(array: T[], name = "urls") => {
  let data = `export const ${name} = [\n`;
  array.map((url) => {
    data += `"${url}",\n`;
  });
  data += `];\n`;
  return data;
};

export const writeURLsIndex = async (cwd: string, urls: string[]) => {
  const fullpath = getFullPath(cwd);
  const oldURLs = await loadExistingURLs(cwd);
  const added = urls.filter((url) => !oldURLs.includes(url));
  const removed = oldURLs.filter((url) => !urls.includes(url));
  const all = [...urls, ...oldURLs]
    .filter(uniqueFilter)
    .filter((url) => !removed.includes(url))
    .sort();

  let data = `// Do not edit! this file was automatically generated by SSSX\n`;

  data += arrayToFile(all, "all") + `\n`;
  data += arrayToFile(added, "added") + `\n`;
  data += arrayToFile(removed, "removed") + `\n`;

  fs.writeFileSync(fullpath, data, "utf8");
};
